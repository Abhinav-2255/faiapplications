from collections import defaultdict

class DeadlockDetector:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def is_cyclic_util(self, v, visited, rec_stack):
        visited[v] = True
        rec_stack[v] = True

        for neighbour in self.graph[v]:
            if not visited[neighbour]:
                if self.is_cyclic_util(neighbour, visited, rec_stack):
                    return True
            elif rec_stack[neighbour]:
                return True

        rec_stack[v] = False
        return False

    def detect_deadlock(self):
        visited = defaultdict(bool)
        rec_stack = defaultdict(bool)

        for node in list(self.graph):
            if not visited[node]:
                if self.is_cyclic_util(node, visited, rec_stack):
                    return True
        return False


# Example Resource Allocation Graph
rag = DeadlockDetector()

# Processes: P1, P2 | Resources: R1, R2
# P1 → R1 (holding), P2 → R2 (holding)
# P1 requesting R2, P2 requesting R1 (deadlock cycle)

rag.add_edge("P1", "R2")  # P1 requests R2
rag.add_edge("R2", "P2")  # R2 assigned to P2
rag.add_edge("P2", "R1")  # P2 requests R1
rag.add_edge("R1", "P1")  # R1 assigned to P1

if rag.detect_deadlock():
    print("⚠ Deadlock detected in the system!")
else:
    print("✅ No deadlock found.")
